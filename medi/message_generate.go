package medi

import (
	"math/rand"
	"sync"
	"time"
)

// Список вариантов сообщений
var (
	messages = []string{
		"Ваше мнение важно для нас! Как бы вы оценили наш сервис по шкале от 1 до 5?",
		"Помогите нам стать лучше! Пожалуйста, поставьте нам оценку от 1 до 5.",
		"Как вам наш сервис? Оцените от 1 до 5, это займет всего пару секунд!",
		"Мы стремимся к совершенству! Какую оценку (от 1 до 5) вы бы нам поставили?",
		"Было ли вам удобно с нами? Поставьте оценку от 1 до 5, нам важно ваше мнение!",
		"Ваш отзыв помогает нам расти! Пожалуйста, оцените нашу работу от 1 до 5.",
		"Расскажите пожалуйста о своих впечатлениях и поставьте нам оценку от 1 до 5. С заботой о Вашем здоровье, клиника МЭДИ",
	}

	messageIndex int
	mu           sync.Mutex
)

// Функция для получения сообщения по порядку
func getSequentialMessage() string {
	mu.Lock()
	defer mu.Unlock()

	message := messages[messageIndex]
	messageIndex = (messageIndex + 1) % len(messages) // Цикличное увеличение индекса

	return message
}

func getRandomMessage() string {
	src := rand.NewSource(time.Now().UnixNano()) // Создаем новый источник случайных чисел
	r := rand.New(src)                           // Инициализируем генератор с этим источником
	return messages[r.Intn(len(messages))]
}
